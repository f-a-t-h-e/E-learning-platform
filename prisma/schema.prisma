// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// https://notiz.dev/blog/prisma-dbml-generator
// https://dbdiagram.io/d
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int          @id @default(autoincrement())
  email     String       @unique
  password  String
  role      Role         @relation(fields: [roleName], references: [name])
  roleName  String
  profile   UserProfile?
  Sessions  Session[]
  // timestamp
  createdAt DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt DateTime     @updatedAt @db.Timestamptz(3)
}

model Session {
  sessionId    Int      @id @default(autoincrement())
  refreshToken String
  userId       Int
  User         User     @relation(fields: [userId], references: [userId])
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  expiresAt    DateTime @db.Timestamptz(3)
}

model UserProfile {
  userId             Int                 @unique
  user               User                @relation(fields: [userId], references: [userId])
  username           String              @unique
  firstName          String
  secondName         String?
  thirdName          String?
  lastName           String
  bio                String?
  avatar             String?
  banner             String?
  phone              String?
  // timestamp
  createdAt          DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime            @updatedAt @db.Timestamptz(3)
  // Relations
  UploadedMedia      CourseMedia[]
  // ChatParticipations ChatParticipant[]
  // CreatedForums      Forum[]
  // ForumMemberIn      ForumMember[]
  // ForumPosts         ForumPost[]
  // ForumComments      ForumComment[]
  Attendance         CourseAttendance[]
  // For instructores
  CreatedUnits       Unit[]
  CreatedLessons     Lesson[]
  InstructoreCourses CourseInstructor[]
  // For students
  // LessonsFeedbacks   LessonFeedback[]
  CoursesProgress    CourseProgress[]
  Certificates       CourseCertificate[]
  QuizSubmissions    QuizSubmission[]
  CoursesEnrollment  CourseEnrollment[]
}

model Role {
  name  String @unique
  users User[]
}

model Course {
  courseId         Int                 @id @default(autoincrement())
  title            String
  description      String?
  banner           String?
  quizFullGrade    Int                 @default(0)
  quizPassGrade    Int?
  state            CourseState         @default(created)
  // timestamp
  createdAt        DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime            @updatedAt @db.Timestamptz(3)
  // Relations
  Units            Unit[]
  Lessons          Lesson[]
  Media            CourseMedia[]
  Students         CourseEnrollment[]
  Instructors      CourseInstructor[]
  Attendance       CourseAttendance[]
  StudentsProgress CourseProgress[]
  Quizzes          Quiz[]
  Certificates     CourseCertificate[]
  // Feedbacks        LessonFeedback[]
  // Forums           Forum[]
  QuizSubmissions  QuizSubmission[]
}

enum CourseState {
  created
  available
  calculatedGrades
}

model CourseEnrollment {
  courseEnrollmentId Int                   @id @default(autoincrement())
  courseId           Int
  Course             Course                @relation(fields: [courseId], references: [courseId])
  studentId          Int
  Student            UserProfile           @relation(fields: [studentId], references: [userId])
  state              CourseEnrollmentState
  quizGrade          Int
  // timestamp
  createdAt          DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime              @updatedAt @db.Timestamptz(3)
  endsAt             DateTime?
}

enum CourseEnrollmentState {
  active
}

model CourseInstructor {
  courseInstructorId Int                       @id @default(autoincrement())
  courseId           Int
  Course             Course                    @relation(fields: [courseId], references: [courseId])
  instructorId       Int
  Instructor         UserProfile               @relation(fields: [instructorId], references: [userId])
  position           CourseInstructorPositions
  state              CourseInstructorState
  // timestamp
  createdAt          DateTime                  @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime                  @updatedAt @db.Timestamptz(3)
  endsAt             DateTime?
}

enum CourseInstructorPositions {
  owner
  teacher
}

enum CourseInstructorState {
  active
}

model CourseMedia {
  courseMediaId Int               @id @default(autoincrement())
  url           String
  type          MediaType
  extension     String
  state         MediaState
  bytes         BigInt
  userId        Int
  UserProfile   UserProfile       @relation(fields: [userId], references: [userId])
  courseId      Int?
  Course        Course?           @relation(fields: [courseId], references: [courseId])
  unitId        Int?
  Unit          Unit?             @relation(fields: [unitId], references: [unitId])
  lessonId      Int?
  Lesson        Lesson?           @relation(fields: [lessonId], references: [lessonId])
  target        CourseMediaTarget
  // timestamp
  createdAt     DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime          @updatedAt @db.Timestamptz(3)
}

enum MediaType {
  image
  video
  audio
  document
}

enum MediaState {
  uploading
  uploaded
  failed
}

enum CourseMediaTarget {
  // // 'profile-picture'
  // profile_picture
  // // 'profile-banner'
  // profile_banner
  // 'course-banner'
  course_banner
  // 'course-material'
  course_material
  // 'unit-banner'
  unit_banner
  // 'unit-material'
  unit_material
  // 'lesson-banner'
  lesson_banner
  // 'lesson-material'
  lesson_material
}

model Unit {
  unitId        Int           @id @default(autoincrement())
  order         Int           @db.SmallInt
  title         String
  description   String?
  banner        String?
  quizFullGrade Int           @default(0)
  quizPassGrade Int?
  courseId      Int
  Course        Course        @relation(fields: [courseId], references: [courseId])
  // Owner
  userId        Int
  AddedBy       UserProfile   @relation(fields: [userId], references: [userId])
  state         UnitState     @default(created)
  // timestamp
  createdAt     DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(3)
  // Relations
  Lessons       Lesson[]
  Quizzes       Quiz[]
  Media         CourseMedia[]
}

enum UnitState {
  created
  available
  calculatedGrades
}

model Lesson {
  lessonId      Int            @id @default(autoincrement())
  order         Int            @db.SmallInt
  title         String
  banner        String?
  description   String?
  quizFullGrade Int            @default(0) @db.SmallInt
  quizPassGrade Int?           @db.SmallInt
  unitId        Int
  Unit          Unit           @relation(fields: [unitId], references: [unitId])
  userId        Int
  AddedBy       UserProfile    @relation(fields: [userId], references: [userId])
  courseId      Int
  Course        Course         @relation(fields: [courseId], references: [courseId])
  LessonContent LessonContent?
  state         LessonState    @default(created)
  // timestamp
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @db.Timestamptz(3)
  // Relations
  // Feedbacks      LessonFeedback[]
  Media         CourseMedia[]
  Quizzes       Quiz[]
}

enum LessonState {
  created
  available
  calculatedGrades
}

model LessonContent {
  lessonId    Int         @id
  contentType ContentType
  content     String
  Lesson      Lesson      @relation(fields: [lessonId], references: [lessonId])
  // timestamp
  createdAt   DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(3)
}

enum ContentType {
  url
  text
}

// model LessonFeedback {
//   id       Int         @id @default(autoincrement())
//   lessonId Int
//   Lesson   Lesson      @relation(fields: [lessonId], references: [lessonId])
//   userId   Int
//   Profile  UserProfile @relation(fields: [userId], references: [userId])
//   feedback String
//   Course   Course?     @relation(fields: [courseId], references: [courseId])
//   courseId Int?
// }

// Quizzes and Asignments

model Quiz {
  quizId             Int              @id @default(autoincrement())
  order              Int              @db.SmallInt
  courseId           Int
  Course             Course           @relation(fields: [courseId], references: [courseId])
  title              String
  unitId             Int?
  Unit               Unit?            @relation(fields: [unitId], references: [unitId])
  lessonId           Int?
  Lesson             Lesson?          @relation(fields: [lessonId], references: [lessonId])
  fullGrade          Int              @default(0) @db.SmallInt
  passGrade          Int?             @default(0) @db.SmallInt
  // Dates
  startsAt           DateTime         @db.Timestamptz(3)
  endsAt             DateTime?        @db.Timestamptz(3)
  lateSubmissionDate DateTime?        @db.Timestamptz(3)
  state              QuizState        @default(created)
  // timestamp
  createdAt          DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(3)
  // Relations
  Questions          QuizQuestion[]
  QuizSubmission     QuizSubmission[]
}

enum QuizState {
  created
  available
  calculatedGrades
}

model QuizQuestion {
  quizQuestionId Int                  @id @default(autoincrement())
  order          Int                  @db.SmallInt
  quizId         Int
  Quiz           Quiz                 @relation(fields: [quizId], references: [quizId])
  questionText   String
  fullGrade      Int                  @default(0) @db.SmallInt
  passGrade      Int?                 @default(0) @db.SmallInt
  correctAnswer  String?
  questionType   QuestionType
  // Relations
  Options        QuizQuestionOption[]
  QuizAnswer     QuizAnswer[]
}

enum QuestionType {
  multiple_choice
  true_false
  short_answer
  long_answer
}

// @todo add optional url to a file
model QuizQuestionOption {
  quizeQuestionOptionId Int          @db.SmallInt
  questionId            Int
  Question              QuizQuestion @relation(fields: [questionId], references: [quizQuestionId])
  optionText            String
  grade                 Int          @default(0) @db.SmallInt

  @@id([quizeQuestionOptionId, questionId])
}

model QuizSubmission {
  quizSubmissionId Int          @id @default(autoincrement())
  quizId           Int
  Quiz             Quiz         @relation(fields: [quizId], references: [quizId])
  studentId        Int
  Student          UserProfile  @relation(fields: [studentId], references: [userId])
  grade            Int?         @db.SmallInt
  courseId         Int
  Course           Course       @relation(fields: [courseId], references: [courseId])
  createdAt        DateTime     @default(now()) @db.Timestamptz(3)
  // Relations
  Answers          QuizAnswer[]
}

model QuizAnswer {
  quizAnswerId Int            @id @default(autoincrement())
  submissionId Int
  questionId   Int
  answer       String
  // isCorrect    Boolean?
  grade        Int?           @db.SmallInt
  Submission   QuizSubmission @relation(fields: [submissionId], references: [quizSubmissionId])
  Question     QuizQuestion   @relation(fields: [questionId], references: [quizQuestionId])
}

model CourseProgress {
  courseProgressId Int         @id @default(autoincrement())
  courseId         Int
  course           Course      @relation(fields: [courseId], references: [courseId])
  studentId        Int
  Student          UserProfile @relation(fields: [studentId], references: [userId])
  progress         Float
}

model CourseAttendance {
  courseAttendanceId Int         @id @default(autoincrement())
  courseId           Int
  Course             Course      @relation(fields: [courseId], references: [courseId])
  userId             Int
  Profile            UserProfile @relation(fields: [userId], references: [userId])
  info               String
  date               DateTime    @db.Timestamptz(3)
}

model CourseCertificate {
  courseCertificateId Int         @id @default(autoincrement())
  courseId            Int
  Course              Course      @relation(fields: [courseId], references: [courseId])
  userId              Int
  Profile             UserProfile @relation(fields: [userId], references: [userId])
  issueDate           DateTime    @db.Timestamptz(3)
}

// @todo Forums

// model Forum {
//   id           Int           @id @default(autoincrement())
//   title        String
//   description  String?
//   createdBy    Int
//   Owner        UserProfile   @relation(fields: [createdBy], references: [userId])
//   courseId     Int?
//   Course       Course?       @relation(fields: [courseId], references: [courseId])
//   // timestamp
//   createdAt    DateTime      @default(now()) @db.Timestamptz(3)
//   updatedAt    DateTime      @updatedAt @db.Timestamptz(3)
//   // Relations
//   ForumMembers ForumMember[]
//   ForumPosts   ForumPost[]
// }

// model ForumMember {
//   forumId   Int
//   Forum     Forum          @relation(fields: [forumId], references: [id])
//   memberId  Int
//   Member    UserProfile    @relation(fields: [memberId], references: [userId])
//   position  ForumPositions
//   // timestamp
//   createdAt DateTime       @default(now()) @db.Timestamptz(3)
//   updatedAt DateTime       @updatedAt @db.Timestamptz(3)

//   @@id([forumId, memberId])
// }

// enum ForumPositions {
//   OWNER
//   TEACHER
//   STUDENT
// }

// model ForumPost {
//   id        Int            @id @default(autoincrement())
//   title     String
//   content   String
//   writerId  Int
//   Writer    UserProfile    @relation(fields: [writerId], references: [userId])
//   forumId   Int
//   Forum     Forum          @relation(fields: [forumId], references: [id])
//   // timestamp
//   createdAt DateTime       @default(now()) @db.Timestamptz(3)
//   updatedAt DateTime       @updatedAt @db.Timestamptz(3)
//   // Relations
//   Comments  ForumComment[]
// }

// model ForumComment {
//   id        Int         @id @default(autoincrement())
//   content   String
//   postId    Int
//   post      ForumPost   @relation(fields: [postId], references: [id])
//   writerId  Int
//   Writer    UserProfile @relation(fields: [writerId], references: [userId])
//   // timestamp
//   createdAt DateTime    @default(now()) @db.Timestamptz(3)
//   updatedAt DateTime    @updatedAt @db.Timestamptz(3)
// }

// @todo Chats

// model Chat {
//   id           Int               @id @default(autoincrement())
//   title        String?
//   description  String?
//   bannerUrl    String?
//   createdAt    DateTime          @default(now()) @db.Timestamptz(3)
//   // Relations
//   Participants ChatParticipant[]
//   Messages     Message[]
// }

// // Keep the id field to have the messages nested inside the ChatParticipations for the profile
// model ChatParticipant {
//   id                    Int                   @id @default(autoincrement())
//   profileId             Int
//   Profile               UserProfile           @relation(fields: [profileId], references: [userId])
//   chatId                Int
//   Chat                  Chat                  @relation(fields: [chatId], references: [id])
//   joinedAt              DateTime              @default(now()) @db.Timestamptz(3)
//   participationStatus   ChatParticipantStatus
//   lastReceivedMessageId Int?
//   lastReadMessageId     Int?
//   LastReceivedMessage   Message?              @relation("last_received_message", fields: [lastReceivedMessageId], references: [id])
//   LastReadMessage       Message?              @relation("last_read_message", fields: [lastReadMessageId], references: [id])
//   // Relations
//   SentMessages          Message[]
// }

// enum ChatParticipantStatus {
//   ACTIVE
//   INACTIVE
// }

// model Message {
//   id               Int               @id @default(autoincrement())
//   senderId         Int
//   Sender           ChatParticipant   @relation(fields: [senderId], references: [id])
//   chatId           Int
//   Chat             Chat              @relation(fields: [chatId], references: [id])
//   content          String
//   messageType      MessageType
//   replyToMessageId Int?
//   ReplyToMessage   Message?          @relation("message_reply", fields: [replyToMessageId], references: [id])
//   // timestamp
//   createdAt        DateTime          @default(now()) @db.Timestamptz(3)
//   updatedAt        DateTime          @updatedAt @db.Timestamptz(3)
//   // Relations
//   LastReceivedBy   ChatParticipant[] @relation("last_received_message")
//   LastReadBy       ChatParticipant[] @relation("last_read_message")
//   Replies          Message[]         @relation("message_reply")
// }

// enum MessageType {
//   TEXT
//   FILE
//   IMAGE
//   AUDIO
//   VIDEO
//   // DOCUMENT
// }
