// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      Role      @relation(fields: [roleName], references: [name])
  roleName  String
  profile   Profile?
  // 
  // Done
  // 
  Sessions  Session[]
  // 
  // timestamp
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
  // Forums
  // 
}

model Session {
  id           Int      @id @default(autoincrement())
  refreshToken String
  userId       Int
  User         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  expiresAt    DateTime @db.Timestamptz(3)
}

model Profile {
  userId             Int                @unique
  user               User               @relation(fields: [userId], references: [id])
  firstName          String
  secondName         String?
  thirdName          String?
  lastName           String
  bio                String?
  avatar             String?
  phone              String?
  // timestamp
  createdAt          DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime           @updatedAt @db.Timestamptz(3)
  // Relations
  ChatParticipations ChatParticipant[]
  UploadedMedia      Media[]
  CreatedForums      Forum[]
  ForumMemberIn      ForumMember[]
  ForumPosts         ForumPost[]
  ForumComments      ForumComment[]
  Attendance         Attendance[]
  // For instructores
  CreatedUnits       Unit[]
  CreatedLessons     Lesson[]
  InstructoreCourses CourseInstructor[]
  // For students
  LessonsFeedbacks   LessonFeedback[]
  CoursesProgress    CourseProgress[]
  Certificates       Certificate[]
  QuizSubmissions    QuizSubmission[]
  CoursesEnrollment  CourseEnrollment[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Course {
  id               Int                @id @default(autoincrement())
  title            String
  description      String?
  // timestamp
  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime           @updatedAt @db.Timestamptz(3)
  // Relations
  Units            Unit[]
  Lessons          Lesson[]
  Media            Media[]
  Students         CourseEnrollment[]
  Instructors      CourseInstructor[]
  Attendance       Attendance[]
  StudentsProgress CourseProgress[]
  Quizzes          Quiz[]
  Certificates     Certificate[]
  Feedbacks        LessonFeedback[]
  Forums           Forum[]
}

model CourseEnrollment {
  courseId  Int
  Course    Course   @relation(fields: [courseId], references: [id])
  studentId Int
  Student   Profile  @relation(fields: [studentId], references: [userId])
  // timestamp
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@unique([studentId, courseId])
}

model CourseInstructor {
  courseId     Int
  Course       Course                    @relation(fields: [courseId], references: [id])
  instructorId Int
  Instructor   Profile                   @relation(fields: [instructorId], references: [userId])
  position     CourseInstructorPositions

  @@unique([instructorId, courseId])
}

enum CourseInstructorPositions {
  OWNER
  TEACHER
}

model Media {
  id        Int        @id @default(autoincrement())
  url       String
  type      MediaType
  extension String
  state     MediaState
  bytes     BigInt
  profileId Int
  Profile   Profile    @relation(fields: [profileId], references: [userId])
  courseId  Int?
  course    Course?    @relation(fields: [courseId], references: [id])
  lessonId  Int?
  lesson    Lesson?    @relation(fields: [lessonId], references: [id])
  // timestamp
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt DateTime   @updatedAt @db.Timestamptz(3)
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum MediaState {
  UPLOADING
  FAILED
  UPLOADED
}

model Unit {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  courseId    Int
  // Owner
  addedBy     Int
  AddedBy     Profile  @relation(fields: [addedBy], references: [userId])
  Course      Course   @relation(fields: [courseId], references: [id])
  // timestamp
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  // Relations
  Lessons     Lesson[]
  Quizzes     Quiz[]
}

model Lesson {
  id            Int              @id @default(autoincrement())
  title         String
  unitId        Int
  courseId      Int
  description   String?
  addedBy       Int
  AddedBy       Profile          @relation(fields: [addedBy], references: [userId])
  Unit          Unit             @relation(fields: [unitId], references: [id])
  Course        Course           @relation(fields: [courseId], references: [id])
  LessonContent LessonContent?
  // timestamp
  createdAt     DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime         @updatedAt @db.Timestamptz(3)
  // Relations
  Feedbacks     LessonFeedback[]
  Media         Media[]
  Quizzes       Quiz[]
}

model LessonContent {
  id          Int         @id
  contentType ContentType
  content     String
  Lesson      Lesson      @relation(fields: [id], references: [id])
  // timestamp
  createdAt   DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(3)
}

enum ContentType {
  URL
  TEXT
}

model LessonFeedback {
  id        Int     @id @default(autoincrement())
  lessonId  Int
  Lesson    Lesson  @relation(fields: [lessonId], references: [id])
  profileId Int
  Profile   Profile @relation(fields: [profileId], references: [userId])
  feedback  String
  Course    Course? @relation(fields: [courseId], references: [id])
  courseId  Int?
}

// Quizzes and Asignments

model Quiz {
  id                 Int              @id @default(autoincrement())
  courseId           Int
  Course             Course           @relation(fields: [courseId], references: [id])
  title              String
  unitId             Int?
  Unit               Unit?            @relation(fields: [unitId], references: [id])
  lessonId           Int?
  Lesson             Lesson?          @relation(fields: [lessonId], references: [id])
  fullMark           Int              @default(0) @db.SmallInt
  passMark           Int              @default(0) @db.SmallInt
  // Dates
  startsAt           DateTime         @db.Timestamptz(3)
  endsAt             DateTime?        @db.Timestamptz(3)
  lateSubmissionDate DateTime?        @db.Timestamptz(3)
  // timestamp
  createdAt          DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime         @updatedAt @db.Timestamptz(3)
  // Relations
  Questions          QuizQuestion[]
  QuizSubmission     QuizSubmission[]
}

model QuizQuestion {
  id            Int                  @id @default(autoincrement())
  quizId        Int
  Quiz          Quiz                 @relation(fields: [quizId], references: [id])
  questionText  String
  fullMark      Int                  @default(0) @db.SmallInt
  passMark      Int                  @default(0) @db.SmallInt
  correctAnswer String?
  questionType  QuestionType // Enum for different question types
  // Relations
  Options       QuizQuestionOption[]
  QuizAnswer    QuizAnswer[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  LONG_ANSWER
}

// @todo add optional url to a file
model QuizQuestionOption {
  id         Int          @db.SmallInt
  questionId Int
  Question   QuizQuestion @relation(fields: [questionId], references: [id])
  optionText String
  mark       Int          @default(0) @db.SmallInt

  @@id([id, questionId])
}

model QuizSubmission {
  id        Int          @id @default(autoincrement())
  quizId    Int
  studentId Int
  marks     Int?
  Quiz      Quiz         @relation(fields: [quizId], references: [id])
  Student   Profile      @relation(fields: [studentId], references: [userId])
  createdAt DateTime     @default(now()) @db.Timestamptz(3)
  // Relations
  Answers   QuizAnswer[]
}

model QuizAnswer {
  id           Int            @id @default(autoincrement())
  submissionId Int
  questionId   Int
  answer       String
  // isCorrect    Boolean?
  mark         Int?           @db.SmallInt
  Submission   QuizSubmission @relation(fields: [submissionId], references: [id])
  Question     QuizQuestion   @relation(fields: [questionId], references: [id])
}

model Forum {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  createdBy    Int
  Owner        Profile       @relation(fields: [createdBy], references: [userId])
  courseId     Int?
  Course       Course?       @relation(fields: [courseId], references: [id])
  // timestamp
  createdAt    DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(3)
  // Relations
  ForumMembers ForumMember[]
  ForumPosts   ForumPost[]
}

model ForumMember {
  forumId   Int
  Forum     Forum          @relation(fields: [forumId], references: [id])
  memberId  Int
  Member    Profile        @relation(fields: [memberId], references: [userId])
  position  ForumPositions
  // timestamp
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt DateTime       @updatedAt @db.Timestamptz(3)

  @@id([forumId, memberId])
}

enum ForumPositions {
  OWNER
  TEACHER
  STUDENT
}

model ForumPost {
  id        Int            @id @default(autoincrement())
  title     String
  content   String
  writerId  Int
  Writer    Profile        @relation(fields: [writerId], references: [userId])
  forumId   Int
  Forum     Forum          @relation(fields: [forumId], references: [id])
  // timestamp
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt DateTime       @updatedAt @db.Timestamptz(3)
  // Relations
  Comments  ForumComment[]
}

model ForumComment {
  id        Int       @id @default(autoincrement())
  content   String
  postId    Int
  post      ForumPost @relation(fields: [postId], references: [id])
  writerId  Int
  Writer    Profile   @relation(fields: [writerId], references: [userId])
  // timestamp
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
}

model CourseProgress {
  id        Int     @id @default(autoincrement())
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id])
  studentId Int
  Student   Profile @relation(fields: [studentId], references: [userId])
  progress  Float
}

model Attendance {
  id        Int      @id @default(autoincrement())
  courseId  Int
  Course    Course   @relation(fields: [courseId], references: [id])
  profileId Int
  Profile   Profile  @relation(fields: [profileId], references: [userId])
  date      DateTime @db.Timestamptz(3)
}

model Certificate {
  id        Int      @id @default(autoincrement())
  courseId  Int
  Course    Course   @relation(fields: [courseId], references: [id])
  profileId Int
  Profile   Profile  @relation(fields: [profileId], references: [userId])
  issueDate DateTime @db.Timestamptz(3)
}

model Chat {
  id           Int               @id @default(autoincrement())
  title        String?
  description  String?
  bannerUrl    String?
  createdAt    DateTime          @default(now()) @db.Timestamptz(3)
  // Relations
  Participants ChatParticipant[]
  Messages     Message[]
}

// Keep the id field to have the messages nested inside the ChatParticipations for the profile
model ChatParticipant {
  id                    Int                   @id @default(autoincrement())
  profileId             Int
  Profile               Profile               @relation(fields: [profileId], references: [userId])
  chatId                Int
  Chat                  Chat                  @relation(fields: [chatId], references: [id])
  joinedAt              DateTime              @default(now()) @db.Timestamptz(3)
  participationStatus   ChatParticipantStatus
  lastReceivedMessageId Int?
  lastReadMessageId     Int?
  LastReceivedMessage   Message?              @relation("last_received_message", fields: [lastReceivedMessageId], references: [id])
  LastReadMessage       Message?              @relation("last_read_message", fields: [lastReadMessageId], references: [id])
  // Relations
  SentMessages          Message[]
}

enum ChatParticipantStatus {
  ACTIVE
  INACTIVE
}

model Message {
  id               Int               @id @default(autoincrement())
  senderId         Int
  Sender           ChatParticipant   @relation(fields: [senderId], references: [id])
  chatId           Int
  Chat             Chat              @relation(fields: [chatId], references: [id])
  content          String
  messageType      MessageType
  replyToMessageId Int?
  ReplyToMessage   Message?          @relation("message_reply", fields: [replyToMessageId], references: [id])
  // timestamp
  createdAt        DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(3)
  // Relations
  LastReceivedBy   ChatParticipant[] @relation("last_received_message")
  LastReadBy       ChatParticipant[] @relation("last_read_message")
  Replies          Message[]         @relation("message_reply")
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  AUDIO
  VIDEO
  // DOCUMENT
}
