// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// https://notiz.dev/blog/prisma-dbml-generator
// https://dbdiagram.io/d
generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int                @id @default(autoincrement())
  email         String             @unique
  password      String
  role          Role               @relation(fields: [roleName], references: [name])
  roleName      String
  profile       UserProfile?
  emailVerified EmailVerifiedState @default(pending)
  Sessions      Session[]
  // timestamp
  createdAt     DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(3)
}

enum EmailVerifiedState {
  pending
  verified
}

model Session {
  sessionId    Int      @id @default(autoincrement())
  refreshToken String
  userId       Int
  User         User     @relation(fields: [userId], references: [userId])
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  expiresAt    DateTime @db.Timestamptz(3)
}

model UserProfile {
  userId                      Int                   @unique
  user                        User                  @relation(fields: [userId], references: [userId])
  username                    String                @unique
  firstName                   String
  secondName                  String?
  thirdName                   String?
  lastName                    String
  bio                         String?
  photo                       String?
  banner                      String?
  phone                       String?
  // timestamp
  createdAt                   DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt                   DateTime              @updatedAt @db.Timestamptz(3)
  // Relations
  // Media
  UploadedCoursesMedia        CourseMedia[]
  UploadedUnitsMedia          UnitMedia[]
  UploadedLessonsMedia        LessonMedia[]
  UploadedQuizMedia           QuizMedia[]
  UploadedQuizSubmissionMedia QuizSubmissionMedia[]
  UploadedUserProfileMedia    UserProfileMedia[]
  // ChatParticipations ChatParticipant[]
  // CreatedForums      Forum[]
  // ForumMemberIn      ForumMember[]
  // ForumPosts         ForumPost[]
  // ForumComments      ForumComment[]
  Attendance                  CourseAttendance[]
  // For instructores
  CreatedUnits                Unit[]
  CreatedLessons              Lesson[]
  InstructoreCourses          CourseInstructor[]
  // For students
  // LessonsFeedbacks   LessonFeedback[]
  CoursesProgress             CourseProgress[]
  Certificates                CourseCertificate[]
  QuizSubmissions             QuizSubmission[]
  CoursesEnrollment           CourseEnrollment[]
}

model Role {
  name  String @unique
  users User[]
}

model Course {
  courseId         Int                 @id @default(autoincrement())
  title            String
  description      String?
  banner           String?
  quizFullGrade    Int                 @default(0)
  quizPassGrade    Int?
  state            CourseState         @default(created)
  // timestamp
  createdAt        DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime            @updatedAt @db.Timestamptz(3)
  // Relations
  Units            Unit[]
  Lessons          Lesson[]
  CourseMedia      CourseMedia[]
  Students         CourseEnrollment[]
  Instructors      CourseInstructor[]
  Attendance       CourseAttendance[]
  StudentsProgress CourseProgress[]
  Quizzes          Quiz[]
  Certificates     CourseCertificate[]
  // Feedbacks        LessonFeedback[]
  // Forums           Forum[]
  QuizSubmissions  QuizSubmission[]
}

enum CourseState {
  created
  available
  calculated_grades
}

model CourseEnrollment {
  courseEnrollmentId Int                   @id @default(autoincrement())
  courseId           Int
  Course             Course                @relation(fields: [courseId], references: [courseId])
  studentId          Int
  Student            UserProfile           @relation(fields: [studentId], references: [userId])
  state              CourseEnrollmentState
  quizGrade          Int
  // timestamp
  createdAt          DateTime              @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime              @updatedAt @db.Timestamptz(3)
  endsAt             DateTime?             @db.Timestamptz(3)
}

enum CourseEnrollmentState {
  active
}

model CourseInstructor {
  courseInstructorId Int                       @id @default(autoincrement())
  courseId           Int
  Course             Course                    @relation(fields: [courseId], references: [courseId])
  instructorId       Int
  Instructor         UserProfile               @relation(fields: [instructorId], references: [userId])
  position           CourseInstructorPositions
  state              CourseInstructorState
  // timestamp
  createdAt          DateTime                  @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime                  @updatedAt @db.Timestamptz(3)
  endsAt             DateTime?                 @db.Timestamptz(3)
}

enum CourseInstructorPositions {
  owner
  teacher
}

enum CourseInstructorState {
  active
}

model Unit {
  unitId        Int         @id @default(autoincrement())
  order         Int         @db.SmallInt
  title         String
  description   String?
  banner        String?
  quizFullGrade Int         @default(0)
  quizPassGrade Int?
  courseId      Int
  Course        Course      @relation(fields: [courseId], references: [courseId])
  // Owner
  userId        Int
  AddedBy       UserProfile @relation(fields: [userId], references: [userId])
  state         UnitState   @default(created)
  // timestamp
  createdAt     DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime    @updatedAt @db.Timestamptz(3)
  // Relations
  Lessons       Lesson[]
  Quizzes       Quiz[]
  UnitMedia     UnitMedia[]
}

enum UnitState {
  created
  available
  calculated_grades
}

model Lesson {
  lessonId      Int            @id @default(autoincrement())
  order         Int            @db.SmallInt
  title         String
  banner        String?
  description   String?
  quizFullGrade Int            @default(0) @db.SmallInt
  quizPassGrade Int?           @db.SmallInt
  unitId        Int
  Unit          Unit           @relation(fields: [unitId], references: [unitId])
  userId        Int
  AddedBy       UserProfile    @relation(fields: [userId], references: [userId])
  courseId      Int
  Course        Course         @relation(fields: [courseId], references: [courseId])
  LessonContent LessonContent?
  state         LessonState    @default(created)
  // timestamp
  createdAt     DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime       @updatedAt @db.Timestamptz(3)
  // Relations
  // Feedbacks      LessonFeedback[]
  Quizzes       Quiz[]
  LessonMedia   LessonMedia[]
}

enum LessonState {
  created
  available
  calculated_grades
}

model LessonContent {
  lessonId    Int         @id
  contentType ContentType
  content     String
  Lesson      Lesson      @relation(fields: [lessonId], references: [lessonId])
  // timestamp
  createdAt   DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(3)
}

enum ContentType {
  url
  text
}

// model LessonFeedback {
//   id       Int         @id @default(autoincrement())
//   lessonId Int
//   Lesson   Lesson      @relation(fields: [lessonId], references: [lessonId])
//   userId   Int
//   Profile  UserProfile @relation(fields: [userId], references: [userId])
//   feedback String
//   Course   Course?     @relation(fields: [courseId], references: [courseId])
//   courseId Int?
// }

// Quizzes and Asignments

model Quiz {
  quizId          Int              @id @default(autoincrement())
  order           Int              @db.SmallInt
  courseId        Int
  Course          Course           @relation(fields: [courseId], references: [courseId])
  title           String
  banner          String?
  unitId          Int?
  Unit            Unit?            @relation(fields: [unitId], references: [unitId])
  lessonId        Int?
  Lesson          Lesson?          @relation(fields: [lessonId], references: [lessonId])
  state           QuizState        @default(created)
  // timestamp
  createdAt       DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(3)
  // Relations
  Questions       QuizQuestion[]
  QuizSubmissions QuizSubmission[]
  QuizMetaData    QuizMetaData?
  QuizMedia       QuizMedia[]
}

enum QuizState {
  created
  available
  calculated_grades
}

model QuizMetaData {
  quizId             Int            @unique
  Quiz               Quiz           @relation(fields: [quizId], references: [quizId])
  // More details
  fullGrade          Int            @default(0) @db.SmallInt
  passGrade          Int?           @default(0) @db.SmallInt
  // null value means infinite attempts, 0 means ?
  attemptsAllowed    Int?           @db.SmallInt
  reviewType         QuizReviewType
  type               QuizType
  // Dates
  startsAt           DateTime       @db.Timestamptz(3)
  endsAt             DateTime?      @db.Timestamptz(3)
  // if provided, means students can submit at any time
  // and the counter starts from the time they started
  // but with a limit to this lateSubmission date
  lateSubmissionDate DateTime?      @db.Timestamptz(3)
}

enum QuizReviewType {
  automatic
  manual
  both
}

enum QuizType {
  // not timed
  randomized
  sequential
  // timed questions
  randomized_timed
  sequential_timed
}

model QuizQuestion {
  quizQuestionId      Int                   @id @default(autoincrement())
  order               Int                   @db.SmallInt
  quizId              Int
  Quiz                Quiz                  @relation(fields: [quizId], references: [quizId])
  questionText        String
  fullGrade           Int                   @default(0) @db.SmallInt
  passGrade           Int?                  @default(0) @db.SmallInt
  correctAnswer       String?
  questionType        QuestionType
  // Relations
  Options             QuizQuestionOption[]
  QuizAnswer          QuizAnswer[]
  QuizSubmissionMedia QuizSubmissionMedia[]
}

enum QuestionType {
  multiple_choice
  true_false
  short_answer
  long_answer
}

// @todo add optional url to a file
model QuizQuestionOption {
  quizeQuestionOptionId Int          @id @default(autoincrement())
  order                 Int          @default(1) @db.SmallInt
  questionId            Int
  Question              QuizQuestion @relation(fields: [questionId], references: [quizQuestionId])
  optionText            String
  grade                 Int          @default(0) @db.SmallInt
  ChosenByAnswers       QuizAnswer[]
}

model QuizSubmission {
  quizSubmissionId    Int                   @id @default(autoincrement())
  quizId              Int
  Quiz                Quiz                  @relation(fields: [quizId], references: [quizId])
  studentId           Int
  Student             UserProfile           @relation(fields: [studentId], references: [userId])
  grade               Int?                  @db.SmallInt
  courseId            Int
  Course              Course                @relation(fields: [courseId], references: [courseId])
  // null for the quizzes that don't have infinite attempts limit
  attempts            Int?                  @db.SmallInt()
  createdAt           DateTime              @default(now()) @db.Timestamptz(3)
  submittedAt         DateTime?             @db.Timestamptz(3)
  reviewedAt          DateTime?             @db.Timestamptz(3)
  // Relations
  Answers             QuizAnswer[]
  QuizSubmissionMedia QuizSubmissionMedia[]
}

model QuizAnswer {
  quizAnswerId   Int                 @id @default(autoincrement())
  submissionId   Int
  questionId     Int
  answer         String?             @db.Text
  chosenOptionId Int?
  ChosenOption   QuizQuestionOption? @relation(fields: [chosenOptionId], references: [quizeQuestionOptionId])
  // isCorrect    Boolean?
  grade          Int?                @db.SmallInt
  Submission     QuizSubmission      @relation(fields: [submissionId], references: [quizSubmissionId])
  Question       QuizQuestion        @relation(fields: [questionId], references: [quizQuestionId])
}

model CourseProgress {
  courseProgressId Int         @id @default(autoincrement())
  courseId         Int
  course           Course      @relation(fields: [courseId], references: [courseId])
  studentId        Int
  Student          UserProfile @relation(fields: [studentId], references: [userId])
  progress         Float
}

model CourseAttendance {
  courseAttendanceId Int         @id @default(autoincrement())
  courseId           Int
  Course             Course      @relation(fields: [courseId], references: [courseId])
  userId             Int
  Profile            UserProfile @relation(fields: [userId], references: [userId])
  info               String
  date               DateTime    @db.Timestamptz(3)
}

model CourseCertificate {
  courseCertificateId Int         @id @default(autoincrement())
  courseId            Int
  Course              Course      @relation(fields: [courseId], references: [courseId])
  userId              Int
  Profile             UserProfile @relation(fields: [userId], references: [userId])
  issueDate           DateTime    @db.Timestamptz(3)
}

// ----------------------- START MEDIA SECTION --------------------------

enum MediaType {
  image
  video
  audio
  document
}

enum MediaState {
  uploading
  uploaded
  failed
}

model UserProfileMedia {
  userProfileMediaId Int                     @id @default(autoincrement())
  url                String
  type               MediaType
  extension          String
  state              MediaState
  bytes              BigInt
  userId             Int
  UserProfile        UserProfile             @relation(fields: [userId], references: [userId])
  purpose            UserProfileMediaPurpose
  // timestamp
  createdAt          DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime                @updatedAt @db.Timestamptz(3)
}

enum UserProfileMediaPurpose {
  profile_banner
  profile_photo
}

model CourseMedia {
  courseMediaId Int                @id @default(autoincrement())
  url           String
  type          MediaType
  extension     String
  state         MediaState
  bytes         BigInt
  userId        Int
  UserProfile   UserProfile        @relation(fields: [userId], references: [userId])
  courseId      Int
  Course        Course             @relation(fields: [courseId], references: [courseId])
  purpose       CourseMediaPurpose
  // timestamp
  createdAt     DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(3)
}

enum CourseMediaPurpose {
  course_banner
  course_material
}

model UnitMedia {
  unitMediaId Int              @id @default(autoincrement())
  url         String
  type        MediaType
  extension   String
  state       MediaState
  bytes       BigInt
  userId      Int
  UserProfile UserProfile      @relation(fields: [userId], references: [userId])
  unitId      Int
  Unit        Unit             @relation(fields: [unitId], references: [unitId])
  purpose     UnitMediaPurpose
  // timestamp
  createdAt   DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(3)
}

enum UnitMediaPurpose {
  unit_banner
  unit_material
}

model LessonMedia {
  lessonMediaId Int                @id @default(autoincrement())
  url           String
  type          MediaType
  extension     String
  state         MediaState
  bytes         BigInt
  userId        Int
  UserProfile   UserProfile        @relation(fields: [userId], references: [userId])
  lessonId      Int
  Lesson        Lesson             @relation(fields: [lessonId], references: [lessonId])
  purpose       LessonMediaPurpose
  // timestamp
  createdAt     DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime           @updatedAt @db.Timestamptz(3)
}

enum LessonMediaPurpose {
  lesson_banner
  lesson_material
}

model QuizMedia {
  quizMediaId Int              @id @default(autoincrement())
  url         String
  type        MediaType
  extension   String
  state       MediaState
  bytes       BigInt
  userId      Int
  UserProfile UserProfile      @relation(fields: [userId], references: [userId])
  quizId      Int
  Quiz        Quiz             @relation(fields: [quizId], references: [quizId])
  purpose     QuizMediaPurpose
  // timestamp
  createdAt   DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime         @updatedAt @db.Timestamptz(3)
}

enum QuizMediaPurpose {
  quiz_banner
  quiz_material
}

model QuizSubmissionMedia {
  quizSubmissionMediaId Int                        @id @default(autoincrement())
  url                   String
  type                  MediaType
  extension             String
  state                 MediaState
  bytes                 BigInt
  userId                Int
  UserProfile           UserProfile                @relation(fields: [userId], references: [userId])
  quizSubmissionId      Int
  QuizSubmission        QuizSubmission             @relation(fields: [quizSubmissionId], references: [quizSubmissionId])
  purpose               QuizSubmissionMediaPurpose
  questionId            Int?
  Question              QuizQuestion?              @relation(fields: [questionId], references: [quizQuestionId])
  // timestamp
  createdAt             DateTime                   @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime                   @updatedAt @db.Timestamptz(3)
}

enum QuizSubmissionMediaPurpose {
  full_quiz_answers
  single_question_answer
  part_of_the_quiz_answers
}

// ----------------------- END MEDIA SECTION --------------------------

// @todo Forums

// model Forum {
//   id           Int           @id @default(autoincrement())
//   title        String
//   description  String?
//   createdBy    Int
//   Owner        UserProfile   @relation(fields: [createdBy], references: [userId])
//   courseId     Int?
//   Course       Course?       @relation(fields: [courseId], references: [courseId])
//   // timestamp
//   createdAt    DateTime      @default(now()) @db.Timestamptz(3)
//   updatedAt    DateTime      @updatedAt @db.Timestamptz(3)
//   // Relations
//   ForumMembers ForumMember[]
//   ForumPosts   ForumPost[]
// }

// model ForumMember {
//   forumId   Int
//   Forum     Forum          @relation(fields: [forumId], references: [id])
//   memberId  Int
//   Member    UserProfile    @relation(fields: [memberId], references: [userId])
//   position  ForumPositions
//   // timestamp
//   createdAt DateTime       @default(now()) @db.Timestamptz(3)
//   updatedAt DateTime       @updatedAt @db.Timestamptz(3)

//   @@id([forumId, memberId])
// }

// enum ForumPositions {
//   OWNER
//   TEACHER
//   STUDENT
// }

// model ForumPost {
//   id        Int            @id @default(autoincrement())
//   title     String
//   content   String
//   writerId  Int
//   Writer    UserProfile    @relation(fields: [writerId], references: [userId])
//   forumId   Int
//   Forum     Forum          @relation(fields: [forumId], references: [id])
//   // timestamp
//   createdAt DateTime       @default(now()) @db.Timestamptz(3)
//   updatedAt DateTime       @updatedAt @db.Timestamptz(3)
//   // Relations
//   Comments  ForumComment[]
// }

// model ForumComment {
//   id        Int         @id @default(autoincrement())
//   content   String
//   postId    Int
//   post      ForumPost   @relation(fields: [postId], references: [id])
//   writerId  Int
//   Writer    UserProfile @relation(fields: [writerId], references: [userId])
//   // timestamp
//   createdAt DateTime    @default(now()) @db.Timestamptz(3)
//   updatedAt DateTime    @updatedAt @db.Timestamptz(3)
// }

// @todo Chats

// model Chat {
//   id           Int               @id @default(autoincrement())
//   title        String?
//   description  String?
//   bannerUrl    String?
//   createdAt    DateTime          @default(now()) @db.Timestamptz(3)
//   // Relations
//   Participants ChatParticipant[]
//   Messages     Message[]
// }

// // Keep the id field to have the messages nested inside the ChatParticipations for the profile
// model ChatParticipant {
//   id                    Int                   @id @default(autoincrement())
//   profileId             Int
//   Profile               UserProfile           @relation(fields: [profileId], references: [userId])
//   chatId                Int
//   Chat                  Chat                  @relation(fields: [chatId], references: [id])
//   joinedAt              DateTime              @default(now()) @db.Timestamptz(3)
//   participationStatus   ChatParticipantStatus
//   lastReceivedMessageId Int?
//   lastReadMessageId     Int?
//   LastReceivedMessage   Message?              @relation("last_received_message", fields: [lastReceivedMessageId], references: [id])
//   LastReadMessage       Message?              @relation("last_read_message", fields: [lastReadMessageId], references: [id])
//   // Relations
//   SentMessages          Message[]
// }

// enum ChatParticipantStatus {
//   ACTIVE
//   INACTIVE
// }

// model Message {
//   id               Int               @id @default(autoincrement())
//   senderId         Int
//   Sender           ChatParticipant   @relation(fields: [senderId], references: [id])
//   chatId           Int
//   Chat             Chat              @relation(fields: [chatId], references: [id])
//   content          String
//   messageType      MessageType
//   replyToMessageId Int?
//   ReplyToMessage   Message?          @relation("message_reply", fields: [replyToMessageId], references: [id])
//   // timestamp
//   createdAt        DateTime          @default(now()) @db.Timestamptz(3)
//   updatedAt        DateTime          @updatedAt @db.Timestamptz(3)
//   // Relations
//   LastReceivedBy   ChatParticipant[] @relation("last_received_message")
//   LastReadBy       ChatParticipant[] @relation("last_read_message")
//   Replies          Message[]         @relation("message_reply")
// }

// enum MessageType {
//   TEXT
//   FILE
//   IMAGE
//   AUDIO
//   VIDEO
//   // DOCUMENT
// }
